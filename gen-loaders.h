/* This file is automatically generated with util/structgen */
void effect_scan_b_index(effect_s *e, int n_ent, entity_s **a_ent, int n_eff, effect_s **a_eff, FILE *stream) {
	(void)n_ent; (void)a_ent; (void)n_eff; (void)a_eff;
	effect_b_index_data *d = (void*)e->data;
	fread(&d->index, sizeof(int), 1, stream);
}
void effect_dump_b_index(effect_s *e, FILE *stream) {
	effect_b_index_data *d = (void*)e->data;
	fwrite(&d->index, sizeof(int), 1, stream);
}
void effect_scan_ph_item(effect_s *e, int n_ent, entity_s **a_ent, int n_eff, effect_s **a_eff, FILE *stream) {
	(void)n_ent; (void)a_ent; (void)n_eff; (void)a_eff;
	effect_ph_item_data *d = (void*)e->data;
	fread(&d->x, sizeof(int), 1, stream);
	fread(&d->y, sizeof(int), 1, stream);
	fread(&d->z, sizeof(int), 1, stream);
	fread(&d->weight, sizeof(int), 1, stream);
	{ int t; fread(&t, sizeof(int), 1, stream); if (t == -1 || t >= n_ent) d->parent = NULL; else d->parent = a_ent[t]; }
	fread(&d->parent_type, sizeof(parent_ref_type), 1, stream);
}
void effect_dump_ph_item(effect_s *e, FILE *stream) {
	effect_ph_item_data *d = (void*)e->data;
	fwrite(&d->x, sizeof(int), 1, stream);
	fwrite(&d->y, sizeof(int), 1, stream);
	fwrite(&d->z, sizeof(int), 1, stream);
	fwrite(&d->weight, sizeof(int), 1, stream);
	{ int t; if (d->parent == NULL){t = -1;}else{t = entity_get_index(d->parent);} fwrite(&t, sizeof(int), 1, stream); }
	fwrite(&d->parent_type, sizeof(parent_ref_type), 1, stream);
}
void effect_scan_tracer(effect_s *e, int n_ent, entity_s **a_ent, int n_eff, effect_s **a_eff, FILE *stream) {
	(void)n_ent; (void)a_ent; (void)n_eff; (void)a_eff;
	effect_tracer_data *d = (void*)e->data;
	fread(&d->x, sizeof(int), 1, stream);
	fread(&d->y, sizeof(int), 1, stream);
	fread(&d->z, sizeof(int), 1, stream);
	fread(&d->cur_x, sizeof(int), 1, stream);
	fread(&d->cur_y, sizeof(int), 1, stream);
	fread(&d->cur_z, sizeof(int), 1, stream);
	fread(&d->speed, sizeof(int), 1, stream);
}
void effect_dump_tracer(effect_s *e, FILE *stream) {
	effect_tracer_data *d = (void*)e->data;
	fwrite(&d->x, sizeof(int), 1, stream);
	fwrite(&d->y, sizeof(int), 1, stream);
	fwrite(&d->z, sizeof(int), 1, stream);
	fwrite(&d->cur_x, sizeof(int), 1, stream);
	fwrite(&d->cur_y, sizeof(int), 1, stream);
	fwrite(&d->cur_z, sizeof(int), 1, stream);
	fwrite(&d->speed, sizeof(int), 1, stream);
}
void effect_scan_block_move(effect_s *e, int n_ent, entity_s **a_ent, int n_eff, effect_s **a_eff, FILE *stream) {
	(void)n_ent; (void)a_ent; (void)n_eff; (void)a_eff;
	effect_block_move_data *d = (void*)e->data;
	fread(&d->x, sizeof(int), 1, stream);
	fread(&d->y, sizeof(int), 1, stream);
	fread(&d->z, sizeof(int), 1, stream);
	fread(&d->delay, sizeof(int), 1, stream);
}
void effect_dump_block_move(effect_s *e, FILE *stream) {
	effect_block_move_data *d = (void*)e->data;
	fwrite(&d->x, sizeof(int), 1, stream);
	fwrite(&d->y, sizeof(int), 1, stream);
	fwrite(&d->z, sizeof(int), 1, stream);
	fwrite(&d->delay, sizeof(int), 1, stream);
}
void effect_scan_stair_move(effect_s *e, int n_ent, entity_s **a_ent, int n_eff, effect_s **a_eff, FILE *stream) {
	(void)n_ent; (void)a_ent; (void)n_eff; (void)a_eff;
	effect_stair_move_data *d = (void*)e->data;
	fread(&d->dir, sizeof(int), 1, stream);
	fread(&d->delay, sizeof(int), 1, stream);
}
void effect_dump_stair_move(effect_s *e, FILE *stream) {
	effect_stair_move_data *d = (void*)e->data;
	fwrite(&d->dir, sizeof(int), 1, stream);
	fwrite(&d->delay, sizeof(int), 1, stream);
}
void effect_scan_render(effect_s *e, int n_ent, entity_s **a_ent, int n_eff, effect_s **a_eff, FILE *stream) {
	(void)n_ent; (void)a_ent; (void)n_eff; (void)a_eff;
	effect_render_data *d = (void*)e->data;
	fread(&d->chr, sizeof(char), 1, stream);
	fread(&d->r, sizeof(uint8_t), 1, stream);
	fread(&d->g, sizeof(uint8_t), 1, stream);
	fread(&d->b, sizeof(uint8_t), 1, stream);
	fread(&d->a, sizeof(uint8_t), 1, stream);
}
void effect_dump_render(effect_s *e, FILE *stream) {
	effect_render_data *d = (void*)e->data;
	fwrite(&d->chr, sizeof(char), 1, stream);
	fwrite(&d->r, sizeof(uint8_t), 1, stream);
	fwrite(&d->g, sizeof(uint8_t), 1, stream);
	fwrite(&d->b, sizeof(uint8_t), 1, stream);
	fwrite(&d->a, sizeof(uint8_t), 1, stream);
}
void effect_scan_limb_slot(effect_s *e, int n_ent, entity_s **a_ent, int n_eff, effect_s **a_eff, FILE *stream) {
	(void)n_ent; (void)a_ent; (void)n_eff; (void)a_eff;
	effect_limb_slot_data *d = (void*)e->data;
	{ int t; fread(&t, sizeof(int), 1, stream); if (t == -1 || t >= n_ent) d->item = NULL; else d->item = a_ent[t]; }
	fread(&d->tag, sizeof(uint32_t), 1, stream);
}
void effect_dump_limb_slot(effect_s *e, FILE *stream) {
	effect_limb_slot_data *d = (void*)e->data;
	{ int t; if (d->item == NULL){t = -1;}else{t = entity_get_index(d->item);} fwrite(&t, sizeof(int), 1, stream); }
	fwrite(&d->tag, sizeof(uint32_t), 1, stream);
}
void effect_scan_limb_hand(effect_s *e, int n_ent, entity_s **a_ent, int n_eff, effect_s **a_eff, FILE *stream) {
	(void)n_ent; (void)a_ent; (void)n_eff; (void)a_eff;
	effect_limb_hand_data *d = (void*)e->data;
	fread(&d->grab_type, sizeof(int), 1, stream);
	{ int t; fread(&t, sizeof(int), 1, stream); if (t == -1 || t >= n_ent) d->item = NULL; else d->item = a_ent[t]; }
}
void effect_dump_limb_hand(effect_s *e, FILE *stream) {
	effect_limb_hand_data *d = (void*)e->data;
	fwrite(&d->grab_type, sizeof(int), 1, stream);
	{ int t; if (d->item == NULL){t = -1;}else{t = entity_get_index(d->item);} fwrite(&t, sizeof(int), 1, stream); }
}
void effect_scan_punch(effect_s *e, int n_ent, entity_s **a_ent, int n_eff, effect_s **a_eff, FILE *stream) {
	(void)n_ent; (void)a_ent; (void)n_eff; (void)a_eff;
	effect_punch_data *d = (void*)e->data;
	{ int t; fread(&t, sizeof(int), 1, stream); if (t == -1 || t >= n_ent) d->ent = NULL; else d->ent = a_ent[t]; }
	fread(&d->delay, sizeof(int), 1, stream);
}
void effect_dump_punch(effect_s *e, FILE *stream) {
	effect_punch_data *d = (void*)e->data;
	{ int t; if (d->ent == NULL){t = -1;}else{t = entity_get_index(d->ent);} fwrite(&t, sizeof(int), 1, stream); }
	fwrite(&d->delay, sizeof(int), 1, stream);
}
void effect_scan_material(effect_s *e, int n_ent, entity_s **a_ent, int n_eff, effect_s **a_eff, FILE *stream) {
	(void)n_ent; (void)a_ent; (void)n_eff; (void)a_eff;
	effect_material_data *d = (void*)e->data;
	fread(&d->type, sizeof(material_type), 1, stream);
	fread(&d->dur, sizeof(int), 1, stream);
}
void effect_dump_material(effect_s *e, FILE *stream) {
	effect_material_data *d = (void*)e->data;
	fwrite(&d->type, sizeof(material_type), 1, stream);
	fwrite(&d->dur, sizeof(int), 1, stream);
}
void effect_scan_size_scale(effect_s *e, int n_ent, entity_s **a_ent, int n_eff, effect_s **a_eff, FILE *stream) {
	(void)n_ent; (void)a_ent; (void)n_eff; (void)a_eff;
	effect_size_scale_data *d = (void*)e->data;
	fread(&d->scale, sizeof(int), 1, stream);
}
void effect_dump_size_scale(effect_s *e, FILE *stream) {
	effect_size_scale_data *d = (void*)e->data;
	fwrite(&d->scale, sizeof(int), 1, stream);
}
void effect_scan_aim(effect_s *e, int n_ent, entity_s **a_ent, int n_eff, effect_s **a_eff, FILE *stream) {
	(void)n_ent; (void)a_ent; (void)n_eff; (void)a_eff;
	effect_aim_data *d = (void*)e->data;
	fread(&d->x, sizeof(int), 1, stream);
	fread(&d->y, sizeof(int), 1, stream);
	fread(&d->z, sizeof(int), 1, stream);
	{ int t; fread(&t, sizeof(int), 1, stream); if (t == -1 || t >= n_ent) d->ent = NULL; else d->ent = a_ent[t]; }
}
void effect_dump_aim(effect_s *e, FILE *stream) {
	effect_aim_data *d = (void*)e->data;
	fwrite(&d->x, sizeof(int), 1, stream);
	fwrite(&d->y, sizeof(int), 1, stream);
	fwrite(&d->z, sizeof(int), 1, stream);
	{ int t; if (d->ent == NULL){t = -1;}else{t = entity_get_index(d->ent);} fwrite(&t, sizeof(int), 1, stream); }
}
void effect_scan_attack(effect_s *e, int n_ent, entity_s **a_ent, int n_eff, effect_s **a_eff, FILE *stream) {
	(void)n_ent; (void)a_ent; (void)n_eff; (void)a_eff;
	effect_attack_data *d = (void*)e->data;
	{ int t; fread(&t, sizeof(int), 1, stream); if (t == -1 || t >= n_ent) d->ent = NULL; else d->ent = a_ent[t]; }
	fread(&d->type, sizeof(int), 1, stream);
	fread(&d->delay, sizeof(int), 1, stream);
	{ int t; fread(&t, sizeof(int), 1, stream); if (t == -1 || t >= n_ent) d->tool = NULL; else d->tool = a_ent[t]; }
}
void effect_dump_attack(effect_s *e, FILE *stream) {
	effect_attack_data *d = (void*)e->data;
	{ int t; if (d->ent == NULL){t = -1;}else{t = entity_get_index(d->ent);} fwrite(&t, sizeof(int), 1, stream); }
	fwrite(&d->type, sizeof(int), 1, stream);
	fwrite(&d->delay, sizeof(int), 1, stream);
	{ int t; if (d->tool == NULL){t = -1;}else{t = entity_get_index(d->tool);} fwrite(&t, sizeof(int), 1, stream); }
}
void effect_scan_table_item(effect_s *e, int n_ent, entity_s **a_ent, int n_eff, effect_s **a_eff, FILE *stream) {
	(void)n_ent; (void)a_ent; (void)n_eff; (void)a_eff;
	effect_table_item_data *d = (void*)e->data;
	{ int t; fread(&t, sizeof(int), 1, stream); if (t == -1 || t >= n_ent) d->item = NULL; else d->item = a_ent[t]; }
}
void effect_dump_table_item(effect_s *e, FILE *stream) {
	effect_table_item_data *d = (void*)e->data;
	{ int t; if (d->item == NULL){t = -1;}else{t = entity_get_index(d->item);} fwrite(&t, sizeof(int), 1, stream); }
}
void effect_scan_s_punch(effect_s *e, int n_ent, entity_s **a_ent, int n_eff, effect_s **a_eff, FILE *stream) {
	(void)n_ent; (void)a_ent; (void)n_eff; (void)a_eff;
	effect_s_punch_data *d = (void*)e->data;
	{ int t; fread(&t, sizeof(int), 1, stream); if (t == -1 || t >= n_ent) d->ent = NULL; else d->ent = a_ent[t]; }
}
void effect_dump_s_punch(effect_s *e, FILE *stream) {
	effect_s_punch_data *d = (void*)e->data;
	{ int t; if (d->ent == NULL){t = -1;}else{t = entity_get_index(d->ent);} fwrite(&t, sizeof(int), 1, stream); }
}
void effect_scan_s_bump(effect_s *e, int n_ent, entity_s **a_ent, int n_eff, effect_s **a_eff, FILE *stream) {
	(void)n_ent; (void)a_ent; (void)n_eff; (void)a_eff;
	effect_s_bump_data *d = (void*)e->data;
	{ int t; fread(&t, sizeof(int), 1, stream); if (t == -1 || t >= n_ent) d->ent = NULL; else d->ent = a_ent[t]; }
	fread(&d->force, sizeof(int), 1, stream);
}
void effect_dump_s_bump(effect_s *e, FILE *stream) {
	effect_s_bump_data *d = (void*)e->data;
	{ int t; if (d->ent == NULL){t = -1;}else{t = entity_get_index(d->ent);} fwrite(&t, sizeof(int), 1, stream); }
	fwrite(&d->force, sizeof(int), 1, stream);
}
void effect_scan_s_dmg(effect_s *e, int n_ent, entity_s **a_ent, int n_eff, effect_s **a_eff, FILE *stream) {
	(void)n_ent; (void)a_ent; (void)n_eff; (void)a_eff;
	effect_s_dmg_data *d = (void*)e->data;
	fread(&d->type, sizeof(int), 1, stream);
	fread(&d->val, sizeof(int), 1, stream);
}
void effect_dump_s_dmg(effect_s *e, FILE *stream) {
	effect_s_dmg_data *d = (void*)e->data;
	fwrite(&d->type, sizeof(int), 1, stream);
	fwrite(&d->val, sizeof(int), 1, stream);
}
void effect_scan_rotation(effect_s *e, int n_ent, entity_s **a_ent, int n_eff, effect_s **a_eff, FILE *stream) {
	(void)n_ent; (void)a_ent; (void)n_eff; (void)a_eff;
	effect_rotation_data *d = (void*)e->data;
	fread(&d->type, sizeof(rotation_type), 1, stream);
	fread(&d->rotation, sizeof(int), 1, stream);
}
void effect_dump_rotation(effect_s *e, FILE *stream) {
	effect_rotation_data *d = (void*)e->data;
	fwrite(&d->type, sizeof(rotation_type), 1, stream);
	fwrite(&d->rotation, sizeof(int), 1, stream);
}
void effect_scan_a_pressure_plate(effect_s *e, int n_ent, entity_s **a_ent, int n_eff, effect_s **a_eff, FILE *stream) {
	(void)n_ent; (void)a_ent; (void)n_eff; (void)a_eff;
	effect_a_pressure_plate_data *d = (void*)e->data;
	fread(&d->thresold, sizeof(int), 1, stream);
}
void effect_dump_a_pressure_plate(effect_s *e, FILE *stream) {
	effect_a_pressure_plate_data *d = (void*)e->data;
	fwrite(&d->thresold, sizeof(int), 1, stream);
}
void effect_scan_m_grab(effect_s *e, int n_ent, entity_s **a_ent, int n_eff, effect_s **a_eff, FILE *stream) {
	(void)n_ent; (void)a_ent; (void)n_eff; (void)a_eff;
	effect_m_grab_data *d = (void*)e->data;
	fread(&d->eff_tag, sizeof(int), 1, stream);
	{ int t; fread(&t, sizeof(int), 1, stream); if (t == -1 || t >= n_ent) d->ent = NULL; else d->ent = a_ent[t]; }
}
void effect_dump_m_grab(effect_s *e, FILE *stream) {
	effect_m_grab_data *d = (void*)e->data;
	fwrite(&d->eff_tag, sizeof(int), 1, stream);
	{ int t; if (d->ent == NULL){t = -1;}else{t = entity_get_index(d->ent);} fwrite(&t, sizeof(int), 1, stream); }
}
void effect_scan_m_drop(effect_s *e, int n_ent, entity_s **a_ent, int n_eff, effect_s **a_eff, FILE *stream) {
	(void)n_ent; (void)a_ent; (void)n_eff; (void)a_eff;
	effect_m_drop_data *d = (void*)e->data;
	fread(&d->eff_tag, sizeof(int), 1, stream);
}
void effect_dump_m_drop(effect_s *e, FILE *stream) {
	effect_m_drop_data *d = (void*)e->data;
	fwrite(&d->eff_tag, sizeof(int), 1, stream);
}
void effect_scan_m_put(effect_s *e, int n_ent, entity_s **a_ent, int n_eff, effect_s **a_eff, FILE *stream) {
	(void)n_ent; (void)a_ent; (void)n_eff; (void)a_eff;
	effect_m_put_data *d = (void*)e->data;
	fread(&d->eff_tag, sizeof(int), 1, stream);
	{ int t; fread(&t, sizeof(int), 1, stream); if (t == -1 || t >= n_ent) d->where = NULL; else d->where = a_ent[t]; }
}
void effect_dump_m_put(effect_s *e, FILE *stream) {
	effect_m_put_data *d = (void*)e->data;
	fwrite(&d->eff_tag, sizeof(int), 1, stream);
	{ int t; if (d->where == NULL){t = -1;}else{t = entity_get_index(d->where);} fwrite(&t, sizeof(int), 1, stream); }
}
void effect_scan_m_throw(effect_s *e, int n_ent, entity_s **a_ent, int n_eff, effect_s **a_eff, FILE *stream) {
	(void)n_ent; (void)a_ent; (void)n_eff; (void)a_eff;
	effect_m_throw_data *d = (void*)e->data;
	fread(&d->eff_tag, sizeof(int), 1, stream);
	fread(&d->x, sizeof(int), 1, stream);
	fread(&d->y, sizeof(int), 1, stream);
	fread(&d->z, sizeof(int), 1, stream);
	fread(&d->speed, sizeof(int), 1, stream);
}
void effect_dump_m_throw(effect_s *e, FILE *stream) {
	effect_m_throw_data *d = (void*)e->data;
	fwrite(&d->eff_tag, sizeof(int), 1, stream);
	fwrite(&d->x, sizeof(int), 1, stream);
	fwrite(&d->y, sizeof(int), 1, stream);
	fwrite(&d->z, sizeof(int), 1, stream);
	fwrite(&d->speed, sizeof(int), 1, stream);
}
void effect_scan_m_aim_for(effect_s *e, int n_ent, entity_s **a_ent, int n_eff, effect_s **a_eff, FILE *stream) {
	(void)n_ent; (void)a_ent; (void)n_eff; (void)a_eff;
	effect_m_aim_for_data *d = (void*)e->data;
	fread(&d->eff_tag, sizeof(int), 1, stream);
	fread(&d->x, sizeof(int), 1, stream);
	fread(&d->y, sizeof(int), 1, stream);
	fread(&d->z, sizeof(int), 1, stream);
	{ int t; fread(&t, sizeof(int), 1, stream); if (t == -1 || t >= n_ent) d->ent = NULL; else d->ent = a_ent[t]; }
}
void effect_dump_m_aim_for(effect_s *e, FILE *stream) {
	effect_m_aim_for_data *d = (void*)e->data;
	fwrite(&d->eff_tag, sizeof(int), 1, stream);
	fwrite(&d->x, sizeof(int), 1, stream);
	fwrite(&d->y, sizeof(int), 1, stream);
	fwrite(&d->z, sizeof(int), 1, stream);
	{ int t; if (d->ent == NULL){t = -1;}else{t = entity_get_index(d->ent);} fwrite(&t, sizeof(int), 1, stream); }
}
void effect_scan_m_touch(effect_s *e, int n_ent, entity_s **a_ent, int n_eff, effect_s **a_eff, FILE *stream) {
	(void)n_ent; (void)a_ent; (void)n_eff; (void)a_eff;
	effect_m_touch_data *d = (void*)e->data;
	fread(&d->eff_tag, sizeof(int), 1, stream);
	{ int t; fread(&t, sizeof(int), 1, stream); if (t == -1 || t >= n_ent) d->ent = NULL; else d->ent = a_ent[t]; }
}
void effect_dump_m_touch(effect_s *e, FILE *stream) {
	effect_m_touch_data *d = (void*)e->data;
	fwrite(&d->eff_tag, sizeof(int), 1, stream);
	{ int t; if (d->ent == NULL){t = -1;}else{t = entity_get_index(d->ent);} fwrite(&t, sizeof(int), 1, stream); }
}
void effect_scan_stats(effect_s *e, int n_ent, entity_s **a_ent, int n_eff, effect_s **a_eff, FILE *stream) {
	(void)n_ent; (void)a_ent; (void)n_eff; (void)a_eff;
	effect_stats_data *d = (void*)e->data;
	fread(&d->str, sizeof(int), 1, stream);
	fread(&d->dex, sizeof(int), 1, stream);
	fread(&d->spd, sizeof(int), 1, stream);
}
void effect_dump_stats(effect_s *e, FILE *stream) {
	effect_stats_data *d = (void*)e->data;
	fwrite(&d->str, sizeof(int), 1, stream);
	fwrite(&d->dex, sizeof(int), 1, stream);
	fwrite(&d->spd, sizeof(int), 1, stream);
}
void effect_scan_ph_liquid(effect_s *e, int n_ent, entity_s **a_ent, int n_eff, effect_s **a_eff, FILE *stream) {
	(void)n_ent; (void)a_ent; (void)n_eff; (void)a_eff;
	effect_ph_liquid_data *d = (void*)e->data;
	fread(&d->amount, sizeof(int), 1, stream);
	fread(&d->type, sizeof(int), 1, stream);
}
void effect_dump_ph_liquid(effect_s *e, FILE *stream) {
	effect_ph_liquid_data *d = (void*)e->data;
	fwrite(&d->amount, sizeof(int), 1, stream);
	fwrite(&d->type, sizeof(int), 1, stream);
}
void effect_scan_container(effect_s *e, int n_ent, entity_s **a_ent, int n_eff, effect_s **a_eff, FILE *stream) {
	(void)n_ent; (void)a_ent; (void)n_eff; (void)a_eff;
	effect_container_data *d = (void*)e->data;
	fread(&d->cont_mask, sizeof(unsigned), 1, stream);
	fread(&d->capacity, sizeof(int), 1, stream);
}
void effect_dump_container(effect_s *e, FILE *stream) {
	effect_container_data *d = (void*)e->data;
	fwrite(&d->cont_mask, sizeof(unsigned), 1, stream);
	fwrite(&d->capacity, sizeof(int), 1, stream);
}
void effect_scan_container_item(effect_s *e, int n_ent, entity_s **a_ent, int n_eff, effect_s **a_eff, FILE *stream) {
	(void)n_ent; (void)a_ent; (void)n_eff; (void)a_eff;
	effect_container_item_data *d = (void*)e->data;
	{ int t; fread(&t, sizeof(int), 1, stream); if (t == -1 || t >= n_ent) d->item = NULL; else d->item = a_ent[t]; }
}
void effect_dump_container_item(effect_s *e, FILE *stream) {
	effect_container_item_data *d = (void*)e->data;
	{ int t; if (d->item == NULL){t = -1;}else{t = entity_get_index(d->item);} fwrite(&t, sizeof(int), 1, stream); }
}
void effect_scan_wet(effect_s *e, int n_ent, entity_s **a_ent, int n_eff, effect_s **a_eff, FILE *stream) {
	(void)n_ent; (void)a_ent; (void)n_eff; (void)a_eff;
	effect_wet_data *d = (void*)e->data;
	fread(&d->type, sizeof(int), 1, stream);
	fread(&d->amount, sizeof(int), 1, stream);
}
void effect_dump_wet(effect_s *e, FILE *stream) {
	effect_wet_data *d = (void*)e->data;
	fwrite(&d->type, sizeof(int), 1, stream);
	fwrite(&d->amount, sizeof(int), 1, stream);
}
