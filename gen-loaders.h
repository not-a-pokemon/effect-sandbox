/* This file is automatically generated with util/structgen */
void effect_scan_b_index(effect_s *e, int n_ent, entity_s **a_ent, FILE *stream) {
	(void)n_ent; (void)a_ent;
	effect_b_index_data *d = (void*)e->data;
	fread(&d->index, sizeof(int), 1, stream);
}
void effect_dump_b_index(effect_s *e, FILE *stream) {
	effect_b_index_data *d = (void*)e->data;
	fwrite(&d->index, sizeof(int), 1, stream);
}
void effect_scan_ph_item(effect_s *e, int n_ent, entity_s **a_ent, FILE *stream) {
	(void)n_ent; (void)a_ent;
	effect_ph_item_data *d = (void*)e->data;
	fread(&d->x, sizeof(int), 1, stream);
	fread(&d->y, sizeof(int), 1, stream);
	fread(&d->z, sizeof(int), 1, stream);
	fread(&d->weight, sizeof(int), 1, stream);
	{ int t; fread(&t, sizeof(int), 1, stream); if (t == -1 || t >= n_ent) d->parent = NULL; else d->parent = a_ent[t]; }
	fread(&d->parent_type, sizeof(parent_ref_type), 1, stream);
}
void effect_dump_ph_item(effect_s *e, FILE *stream) {
	effect_ph_item_data *d = (void*)e->data;
	fwrite(&d->x, sizeof(int), 1, stream);
	fwrite(&d->y, sizeof(int), 1, stream);
	fwrite(&d->z, sizeof(int), 1, stream);
	fwrite(&d->weight, sizeof(int), 1, stream);
	{ int t; if (d->parent == NULL){t = -1;}else{t = entity_get_index(d->parent);} fwrite(&t, sizeof(int), 1, stream); }
	fwrite(&d->parent_type, sizeof(parent_ref_type), 1, stream);
}
int effect_rem_ph_item(entity_s *s, effect_s *e) {
	(void)s; (void)e;
	effect_ph_item_data *d = (void*)e->data;
	if (d->parent != NULL && effect_by_type(d->parent->effects, EF_B_NONEXISTENT) != NULL) d->parent = NULL;
	return 0;
}
void effect_scan_tracer(effect_s *e, int n_ent, entity_s **a_ent, FILE *stream) {
	(void)n_ent; (void)a_ent;
	effect_tracer_data *d = (void*)e->data;
	fread(&d->x, sizeof(int), 1, stream);
	fread(&d->y, sizeof(int), 1, stream);
	fread(&d->z, sizeof(int), 1, stream);
	fread(&d->cur_x, sizeof(int), 1, stream);
	fread(&d->cur_y, sizeof(int), 1, stream);
	fread(&d->cur_z, sizeof(int), 1, stream);
	fread(&d->speed, sizeof(int), 1, stream);
}
void effect_dump_tracer(effect_s *e, FILE *stream) {
	effect_tracer_data *d = (void*)e->data;
	fwrite(&d->x, sizeof(int), 1, stream);
	fwrite(&d->y, sizeof(int), 1, stream);
	fwrite(&d->z, sizeof(int), 1, stream);
	fwrite(&d->cur_x, sizeof(int), 1, stream);
	fwrite(&d->cur_y, sizeof(int), 1, stream);
	fwrite(&d->cur_z, sizeof(int), 1, stream);
	fwrite(&d->speed, sizeof(int), 1, stream);
}
void effect_scan_block_move(effect_s *e, int n_ent, entity_s **a_ent, FILE *stream) {
	(void)n_ent; (void)a_ent;
	effect_block_move_data *d = (void*)e->data;
	fread(&d->x, sizeof(int), 1, stream);
	fread(&d->y, sizeof(int), 1, stream);
	fread(&d->z, sizeof(int), 1, stream);
	fread(&d->delay, sizeof(int), 1, stream);
}
void effect_dump_block_move(effect_s *e, FILE *stream) {
	effect_block_move_data *d = (void*)e->data;
	fwrite(&d->x, sizeof(int), 1, stream);
	fwrite(&d->y, sizeof(int), 1, stream);
	fwrite(&d->z, sizeof(int), 1, stream);
	fwrite(&d->delay, sizeof(int), 1, stream);
}
void effect_scan_stair_move(effect_s *e, int n_ent, entity_s **a_ent, FILE *stream) {
	(void)n_ent; (void)a_ent;
	effect_stair_move_data *d = (void*)e->data;
	fread(&d->dir, sizeof(int), 1, stream);
	fread(&d->delay, sizeof(int), 1, stream);
}
void effect_dump_stair_move(effect_s *e, FILE *stream) {
	effect_stair_move_data *d = (void*)e->data;
	fwrite(&d->dir, sizeof(int), 1, stream);
	fwrite(&d->delay, sizeof(int), 1, stream);
}
void effect_scan_render(effect_s *e, int n_ent, entity_s **a_ent, FILE *stream) {
	(void)n_ent; (void)a_ent;
	effect_render_data *d = (void*)e->data;
	fread(&d->chr, sizeof(char), 1, stream);
	fread(&d->r, sizeof(uint8_t), 1, stream);
	fread(&d->g, sizeof(uint8_t), 1, stream);
	fread(&d->b, sizeof(uint8_t), 1, stream);
	fread(&d->a, sizeof(uint8_t), 1, stream);
}
void effect_dump_render(effect_s *e, FILE *stream) {
	effect_render_data *d = (void*)e->data;
	fwrite(&d->chr, sizeof(char), 1, stream);
	fwrite(&d->r, sizeof(uint8_t), 1, stream);
	fwrite(&d->g, sizeof(uint8_t), 1, stream);
	fwrite(&d->b, sizeof(uint8_t), 1, stream);
	fwrite(&d->a, sizeof(uint8_t), 1, stream);
}
void effect_scan_limb_slot(effect_s *e, int n_ent, entity_s **a_ent, FILE *stream) {
	(void)n_ent; (void)a_ent;
	effect_limb_slot_data *d = (void*)e->data;
	{ int t; fread(&t, sizeof(int), 1, stream); if (t == -1 || t >= n_ent) d->item = NULL; else d->item = a_ent[t]; }
	fread(&d->tag, sizeof(uint32_t), 1, stream);
}
void effect_dump_limb_slot(effect_s *e, FILE *stream) {
	effect_limb_slot_data *d = (void*)e->data;
	{ int t; if (d->item == NULL){t = -1;}else{t = entity_get_index(d->item);} fwrite(&t, sizeof(int), 1, stream); }
	fwrite(&d->tag, sizeof(uint32_t), 1, stream);
}
int effect_rem_limb_slot(entity_s *s, effect_s *e) {
	(void)s; (void)e;
	effect_limb_slot_data *d = (void*)e->data;
	if (d->item != NULL && effect_by_type(d->item->effects, EF_B_NONEXISTENT) != NULL) d->item = NULL;
	return 0;
}
void effect_scan_limb_hand(effect_s *e, int n_ent, entity_s **a_ent, FILE *stream) {
	(void)n_ent; (void)a_ent;
	effect_limb_hand_data *d = (void*)e->data;
	fread(&d->grab_type, sizeof(int), 1, stream);
	{ int t; fread(&t, sizeof(int), 1, stream); if (t == -1 || t >= n_ent) d->item = NULL; else d->item = a_ent[t]; }
}
void effect_dump_limb_hand(effect_s *e, FILE *stream) {
	effect_limb_hand_data *d = (void*)e->data;
	fwrite(&d->grab_type, sizeof(int), 1, stream);
	{ int t; if (d->item == NULL){t = -1;}else{t = entity_get_index(d->item);} fwrite(&t, sizeof(int), 1, stream); }
}
int effect_rem_limb_hand(entity_s *s, effect_s *e) {
	(void)s; (void)e;
	effect_limb_hand_data *d = (void*)e->data;
	if (d->item != NULL && effect_by_type(d->item->effects, EF_B_NONEXISTENT) != NULL) d->item = NULL;
	return 0;
}
void effect_scan_material(effect_s *e, int n_ent, entity_s **a_ent, FILE *stream) {
	(void)n_ent; (void)a_ent;
	effect_material_data *d = (void*)e->data;
	fread(&d->type, sizeof(material_type), 1, stream);
	fread(&d->dur, sizeof(int), 1, stream);
	fread(&d->prop, sizeof(uint32_t), 1, stream);
	fread(&d->tag, sizeof(uint32_t), 1, stream);
}
void effect_dump_material(effect_s *e, FILE *stream) {
	effect_material_data *d = (void*)e->data;
	fwrite(&d->type, sizeof(material_type), 1, stream);
	fwrite(&d->dur, sizeof(int), 1, stream);
	fwrite(&d->prop, sizeof(uint32_t), 1, stream);
	fwrite(&d->tag, sizeof(uint32_t), 1, stream);
}
void effect_scan_aim(effect_s *e, int n_ent, entity_s **a_ent, FILE *stream) {
	(void)n_ent; (void)a_ent;
	effect_aim_data *d = (void*)e->data;
	fread(&d->x, sizeof(int), 1, stream);
	fread(&d->y, sizeof(int), 1, stream);
	fread(&d->z, sizeof(int), 1, stream);
	{ int t; fread(&t, sizeof(int), 1, stream); if (t == -1 || t >= n_ent) d->ent = NULL; else d->ent = a_ent[t]; }
}
void effect_dump_aim(effect_s *e, FILE *stream) {
	effect_aim_data *d = (void*)e->data;
	fwrite(&d->x, sizeof(int), 1, stream);
	fwrite(&d->y, sizeof(int), 1, stream);
	fwrite(&d->z, sizeof(int), 1, stream);
	{ int t; if (d->ent == NULL){t = -1;}else{t = entity_get_index(d->ent);} fwrite(&t, sizeof(int), 1, stream); }
}
int effect_rem_aim(entity_s *s, effect_s *e) {
	(void)s; (void)e;
	effect_aim_data *d = (void*)e->data;
	if (d->ent != NULL && effect_by_type(d->ent->effects, EF_B_NONEXISTENT) != NULL) d->ent = NULL;
	return 0;
}
void effect_scan_attack(effect_s *e, int n_ent, entity_s **a_ent, FILE *stream) {
	(void)n_ent; (void)a_ent;
	effect_attack_data *d = (void*)e->data;
	{ int t; fread(&t, sizeof(int), 1, stream); if (t == -1 || t >= n_ent) d->ent = NULL; else d->ent = a_ent[t]; }
	fread(&d->type, sizeof(int), 1, stream);
	fread(&d->weapon_mat, sizeof(uint32_t), 1, stream);
	fread(&d->delay, sizeof(int), 1, stream);
	{ int t; fread(&t, sizeof(int), 1, stream); if (t == -1 || t >= n_ent) d->tool = NULL; else d->tool = a_ent[t]; }
}
void effect_dump_attack(effect_s *e, FILE *stream) {
	effect_attack_data *d = (void*)e->data;
	{ int t; if (d->ent == NULL){t = -1;}else{t = entity_get_index(d->ent);} fwrite(&t, sizeof(int), 1, stream); }
	fwrite(&d->type, sizeof(int), 1, stream);
	fwrite(&d->weapon_mat, sizeof(uint32_t), 1, stream);
	fwrite(&d->delay, sizeof(int), 1, stream);
	{ int t; if (d->tool == NULL){t = -1;}else{t = entity_get_index(d->tool);} fwrite(&t, sizeof(int), 1, stream); }
}
int effect_rem_attack(entity_s *s, effect_s *e) {
	(void)s; (void)e;
	effect_attack_data *d = (void*)e->data;
	if (d->ent == NULL || effect_by_type(d->ent->effects, EF_B_NONEXISTENT) != NULL) return 1;
	if (d->tool == NULL || effect_by_type(d->tool->effects, EF_B_NONEXISTENT) != NULL) return 1;
	return 0;
}
void effect_scan_table_item(effect_s *e, int n_ent, entity_s **a_ent, FILE *stream) {
	(void)n_ent; (void)a_ent;
	effect_table_item_data *d = (void*)e->data;
	{ int t; fread(&t, sizeof(int), 1, stream); if (t == -1 || t >= n_ent) d->item = NULL; else d->item = a_ent[t]; }
}
void effect_dump_table_item(effect_s *e, FILE *stream) {
	effect_table_item_data *d = (void*)e->data;
	{ int t; if (d->item == NULL){t = -1;}else{t = entity_get_index(d->item);} fwrite(&t, sizeof(int), 1, stream); }
}
int effect_rem_table_item(entity_s *s, effect_s *e) {
	(void)s; (void)e;
	effect_table_item_data *d = (void*)e->data;
	if (d->item == NULL || effect_by_type(d->item->effects, EF_B_NONEXISTENT) != NULL) return 1;
	return 0;
}
void effect_scan_s_bump(effect_s *e, int n_ent, entity_s **a_ent, FILE *stream) {
	(void)n_ent; (void)a_ent;
	effect_s_bump_data *d = (void*)e->data;
	{ int t; fread(&t, sizeof(int), 1, stream); if (t == -1 || t >= n_ent) d->ent = NULL; else d->ent = a_ent[t]; }
	fread(&d->force, sizeof(int), 1, stream);
}
void effect_dump_s_bump(effect_s *e, FILE *stream) {
	effect_s_bump_data *d = (void*)e->data;
	{ int t; if (d->ent == NULL){t = -1;}else{t = entity_get_index(d->ent);} fwrite(&t, sizeof(int), 1, stream); }
	fwrite(&d->force, sizeof(int), 1, stream);
}
int effect_rem_s_bump(entity_s *s, effect_s *e) {
	(void)s; (void)e;
	effect_s_bump_data *d = (void*)e->data;
	if (d->ent != NULL && effect_by_type(d->ent->effects, EF_B_NONEXISTENT) != NULL) d->ent = NULL;
	return 0;
}
void effect_scan_s_dmg(effect_s *e, int n_ent, entity_s **a_ent, FILE *stream) {
	(void)n_ent; (void)a_ent;
	effect_s_dmg_data *d = (void*)e->data;
	fread(&d->type, sizeof(int), 1, stream);
	fread(&d->val, sizeof(int), 1, stream);
}
void effect_dump_s_dmg(effect_s *e, FILE *stream) {
	effect_s_dmg_data *d = (void*)e->data;
	fwrite(&d->type, sizeof(int), 1, stream);
	fwrite(&d->val, sizeof(int), 1, stream);
}
void effect_scan_rotation(effect_s *e, int n_ent, entity_s **a_ent, FILE *stream) {
	(void)n_ent; (void)a_ent;
	effect_rotation_data *d = (void*)e->data;
	fread(&d->type, sizeof(rotation_type), 1, stream);
	fread(&d->rotation, sizeof(int), 1, stream);
}
void effect_dump_rotation(effect_s *e, FILE *stream) {
	effect_rotation_data *d = (void*)e->data;
	fwrite(&d->type, sizeof(rotation_type), 1, stream);
	fwrite(&d->rotation, sizeof(int), 1, stream);
}
void effect_scan_a_pressure_plate(effect_s *e, int n_ent, entity_s **a_ent, FILE *stream) {
	(void)n_ent; (void)a_ent;
	effect_a_pressure_plate_data *d = (void*)e->data;
	fread(&d->thresold, sizeof(int), 1, stream);
}
void effect_dump_a_pressure_plate(effect_s *e, FILE *stream) {
	effect_a_pressure_plate_data *d = (void*)e->data;
	fwrite(&d->thresold, sizeof(int), 1, stream);
}
void effect_scan_m_grab(effect_s *e, int n_ent, entity_s **a_ent, FILE *stream) {
	(void)n_ent; (void)a_ent;
	effect_m_grab_data *d = (void*)e->data;
	fread(&d->eff_tag, sizeof(int), 1, stream);
	{ int t; fread(&t, sizeof(int), 1, stream); if (t == -1 || t >= n_ent) d->ent = NULL; else d->ent = a_ent[t]; }
	fread(&d->mat_tag, sizeof(uint32_t), 1, stream);
}
void effect_dump_m_grab(effect_s *e, FILE *stream) {
	effect_m_grab_data *d = (void*)e->data;
	fwrite(&d->eff_tag, sizeof(int), 1, stream);
	{ int t; if (d->ent == NULL){t = -1;}else{t = entity_get_index(d->ent);} fwrite(&t, sizeof(int), 1, stream); }
	fwrite(&d->mat_tag, sizeof(uint32_t), 1, stream);
}
int effect_rem_m_grab(entity_s *s, effect_s *e) {
	(void)s; (void)e;
	effect_m_grab_data *d = (void*)e->data;
	if (d->ent == NULL || effect_by_type(d->ent->effects, EF_B_NONEXISTENT) != NULL) return 1;
	return 0;
}
void effect_scan_m_drop(effect_s *e, int n_ent, entity_s **a_ent, FILE *stream) {
	(void)n_ent; (void)a_ent;
	effect_m_drop_data *d = (void*)e->data;
	fread(&d->eff_tag, sizeof(int), 1, stream);
}
void effect_dump_m_drop(effect_s *e, FILE *stream) {
	effect_m_drop_data *d = (void*)e->data;
	fwrite(&d->eff_tag, sizeof(int), 1, stream);
}
void effect_scan_m_put(effect_s *e, int n_ent, entity_s **a_ent, FILE *stream) {
	(void)n_ent; (void)a_ent;
	effect_m_put_data *d = (void*)e->data;
	fread(&d->eff_tag, sizeof(int), 1, stream);
	{ int t; fread(&t, sizeof(int), 1, stream); if (t == -1 || t >= n_ent) d->where = NULL; else d->where = a_ent[t]; }
}
void effect_dump_m_put(effect_s *e, FILE *stream) {
	effect_m_put_data *d = (void*)e->data;
	fwrite(&d->eff_tag, sizeof(int), 1, stream);
	{ int t; if (d->where == NULL){t = -1;}else{t = entity_get_index(d->where);} fwrite(&t, sizeof(int), 1, stream); }
}
int effect_rem_m_put(entity_s *s, effect_s *e) {
	(void)s; (void)e;
	effect_m_put_data *d = (void*)e->data;
	if (d->where == NULL || effect_by_type(d->where->effects, EF_B_NONEXISTENT) != NULL) return 1;
	return 0;
}
void effect_scan_m_throw(effect_s *e, int n_ent, entity_s **a_ent, FILE *stream) {
	(void)n_ent; (void)a_ent;
	effect_m_throw_data *d = (void*)e->data;
	fread(&d->eff_tag, sizeof(int), 1, stream);
	fread(&d->x, sizeof(int), 1, stream);
	fread(&d->y, sizeof(int), 1, stream);
	fread(&d->z, sizeof(int), 1, stream);
	fread(&d->speed, sizeof(int), 1, stream);
}
void effect_dump_m_throw(effect_s *e, FILE *stream) {
	effect_m_throw_data *d = (void*)e->data;
	fwrite(&d->eff_tag, sizeof(int), 1, stream);
	fwrite(&d->x, sizeof(int), 1, stream);
	fwrite(&d->y, sizeof(int), 1, stream);
	fwrite(&d->z, sizeof(int), 1, stream);
	fwrite(&d->speed, sizeof(int), 1, stream);
}
void effect_scan_m_aim_for(effect_s *e, int n_ent, entity_s **a_ent, FILE *stream) {
	(void)n_ent; (void)a_ent;
	effect_m_aim_for_data *d = (void*)e->data;
	fread(&d->eff_tag, sizeof(int), 1, stream);
	fread(&d->x, sizeof(int), 1, stream);
	fread(&d->y, sizeof(int), 1, stream);
	fread(&d->z, sizeof(int), 1, stream);
	{ int t; fread(&t, sizeof(int), 1, stream); if (t == -1 || t >= n_ent) d->ent = NULL; else d->ent = a_ent[t]; }
}
void effect_dump_m_aim_for(effect_s *e, FILE *stream) {
	effect_m_aim_for_data *d = (void*)e->data;
	fwrite(&d->eff_tag, sizeof(int), 1, stream);
	fwrite(&d->x, sizeof(int), 1, stream);
	fwrite(&d->y, sizeof(int), 1, stream);
	fwrite(&d->z, sizeof(int), 1, stream);
	{ int t; if (d->ent == NULL){t = -1;}else{t = entity_get_index(d->ent);} fwrite(&t, sizeof(int), 1, stream); }
}
int effect_rem_m_aim_for(entity_s *s, effect_s *e) {
	(void)s; (void)e;
	effect_m_aim_for_data *d = (void*)e->data;
	if (d->ent == NULL || effect_by_type(d->ent->effects, EF_B_NONEXISTENT) != NULL) return 1;
	return 0;
}
void effect_scan_m_touch(effect_s *e, int n_ent, entity_s **a_ent, FILE *stream) {
	(void)n_ent; (void)a_ent;
	effect_m_touch_data *d = (void*)e->data;
	fread(&d->eff_tag, sizeof(int), 1, stream);
	{ int t; fread(&t, sizeof(int), 1, stream); if (t == -1 || t >= n_ent) d->ent = NULL; else d->ent = a_ent[t]; }
}
void effect_dump_m_touch(effect_s *e, FILE *stream) {
	effect_m_touch_data *d = (void*)e->data;
	fwrite(&d->eff_tag, sizeof(int), 1, stream);
	{ int t; if (d->ent == NULL){t = -1;}else{t = entity_get_index(d->ent);} fwrite(&t, sizeof(int), 1, stream); }
}
int effect_rem_m_touch(entity_s *s, effect_s *e) {
	(void)s; (void)e;
	effect_m_touch_data *d = (void*)e->data;
	if (d->ent == NULL || effect_by_type(d->ent->effects, EF_B_NONEXISTENT) != NULL) return 1;
	return 0;
}
void effect_scan_stats(effect_s *e, int n_ent, entity_s **a_ent, FILE *stream) {
	(void)n_ent; (void)a_ent;
	effect_stats_data *d = (void*)e->data;
	fread(&d->str, sizeof(int), 1, stream);
	fread(&d->dex, sizeof(int), 1, stream);
	fread(&d->spd, sizeof(int), 1, stream);
}
void effect_dump_stats(effect_s *e, FILE *stream) {
	effect_stats_data *d = (void*)e->data;
	fwrite(&d->str, sizeof(int), 1, stream);
	fwrite(&d->dex, sizeof(int), 1, stream);
	fwrite(&d->spd, sizeof(int), 1, stream);
}
void effect_scan_ph_liquid(effect_s *e, int n_ent, entity_s **a_ent, FILE *stream) {
	(void)n_ent; (void)a_ent;
	effect_ph_liquid_data *d = (void*)e->data;
	fread(&d->amount, sizeof(int), 1, stream);
	fread(&d->type, sizeof(int), 1, stream);
}
void effect_dump_ph_liquid(effect_s *e, FILE *stream) {
	effect_ph_liquid_data *d = (void*)e->data;
	fwrite(&d->amount, sizeof(int), 1, stream);
	fwrite(&d->type, sizeof(int), 1, stream);
}
void effect_scan_container(effect_s *e, int n_ent, entity_s **a_ent, FILE *stream) {
	(void)n_ent; (void)a_ent;
	effect_container_data *d = (void*)e->data;
	fread(&d->cont_mask, sizeof(unsigned), 1, stream);
	fread(&d->capacity, sizeof(int), 1, stream);
}
void effect_dump_container(effect_s *e, FILE *stream) {
	effect_container_data *d = (void*)e->data;
	fwrite(&d->cont_mask, sizeof(unsigned), 1, stream);
	fwrite(&d->capacity, sizeof(int), 1, stream);
}
void effect_scan_container_item(effect_s *e, int n_ent, entity_s **a_ent, FILE *stream) {
	(void)n_ent; (void)a_ent;
	effect_container_item_data *d = (void*)e->data;
	{ int t; fread(&t, sizeof(int), 1, stream); if (t == -1 || t >= n_ent) d->item = NULL; else d->item = a_ent[t]; }
}
void effect_dump_container_item(effect_s *e, FILE *stream) {
	effect_container_item_data *d = (void*)e->data;
	{ int t; if (d->item == NULL){t = -1;}else{t = entity_get_index(d->item);} fwrite(&t, sizeof(int), 1, stream); }
}
int effect_rem_container_item(entity_s *s, effect_s *e) {
	(void)s; (void)e;
	effect_container_item_data *d = (void*)e->data;
	if (d->item == NULL || effect_by_type(d->item->effects, EF_B_NONEXISTENT) != NULL) return 1;
	return 0;
}
void effect_scan_wet(effect_s *e, int n_ent, entity_s **a_ent, FILE *stream) {
	(void)n_ent; (void)a_ent;
	effect_wet_data *d = (void*)e->data;
	fread(&d->type, sizeof(int), 1, stream);
	fread(&d->amount, sizeof(int), 1, stream);
}
void effect_dump_wet(effect_s *e, FILE *stream) {
	effect_wet_data *d = (void*)e->data;
	fwrite(&d->type, sizeof(int), 1, stream);
	fwrite(&d->amount, sizeof(int), 1, stream);
}

int effect_data_size[] = {
	[EF_B_NONEXISTENT] = 0,
	[EF_B_INDEX] = sizeof(effect_b_index_data),
	[EF_PH_BLOCK] = sizeof(effect_ph_block_data),
	[EF_PH_ITEM] = sizeof(effect_ph_item_data),
	[EF_FALLING] = 0,
	[EF_TRACER] = sizeof(effect_tracer_data),
	[EF_BLOCK_MOVE] = sizeof(effect_block_move_data),
	[EF_STAIR_MOVE] = sizeof(effect_stair_move_data),
	[EF_RENDER] = sizeof(effect_render_data),
	[EF_NOPHYSICS] = 0,
	[EF_LIMB_SLOT] = sizeof(effect_limb_slot_data),
	[EF_LIMB_HAND] = sizeof(effect_limb_hand_data),
	[EF_LIMB_LEG] = 0,
	[EF_MATERIAL] = sizeof(effect_material_data),
	[EF_AIM] = sizeof(effect_aim_data),
	[EF_ATTACK] = sizeof(effect_attack_data),
	[EF_TABLE] = 0,
	[EF_TABLE_ITEM] = sizeof(effect_table_item_data),
	[EF_FIRE] = 0,
	[EF_S_TOUCH] = 0,
	[EF_S_BUMP] = sizeof(effect_s_bump_data),
	[EF_S_DMG] = sizeof(effect_s_dmg_data),
	[EF_ROTATION] = sizeof(effect_rotation_data),
	[EF_A_PRESSURE_PLATE] = sizeof(effect_a_pressure_plate_data),
	[EF_A_CIRCLE_MOVE] = 0,
	[EF_M_GRAB] = sizeof(effect_m_grab_data),
	[EF_M_DROP] = sizeof(effect_m_drop_data),
	[EF_M_PUT] = sizeof(effect_m_put_data),
	[EF_M_THROW] = sizeof(effect_m_throw_data),
	[EF_M_AIM_FOR] = sizeof(effect_m_aim_for_data),
	[EF_M_TOUCH] = sizeof(effect_m_touch_data),
	[EF_R_TOUCH_RNG_TP] = 0,
	[EF_R_TOUCH_TOGGLE_BLOCK] = 0,
	[EF_R_TOUCH_SHOOT_PROJECTILE] = 0,
	[EF_STATS] = sizeof(effect_stats_data),
	[EF_PH_LIQUID] = sizeof(effect_ph_liquid_data),
	[EF_CONTAINER] = sizeof(effect_container_data),
	[EF_CONTAINER_ITEM] = sizeof(effect_container_item_data),
	[EF_WET] = sizeof(effect_wet_data),
};

effect_dump_t effect_dump_functions[] = {
	[EF_B_NONEXISTENT] = NULL,
	[EF_B_INDEX] = effect_dump_b_index,
	[EF_PH_BLOCK] = effect_dump_ph_block,
	[EF_PH_ITEM] = effect_dump_ph_item,
	[EF_FALLING] = NULL,
	[EF_TRACER] = effect_dump_tracer,
	[EF_BLOCK_MOVE] = effect_dump_block_move,
	[EF_STAIR_MOVE] = effect_dump_stair_move,
	[EF_RENDER] = effect_dump_render,
	[EF_NOPHYSICS] = NULL,
	[EF_LIMB_SLOT] = effect_dump_limb_slot,
	[EF_LIMB_HAND] = effect_dump_limb_hand,
	[EF_LIMB_LEG] = NULL,
	[EF_MATERIAL] = effect_dump_material,
	[EF_AIM] = effect_dump_aim,
	[EF_ATTACK] = effect_dump_attack,
	[EF_TABLE] = NULL,
	[EF_TABLE_ITEM] = effect_dump_table_item,
	[EF_FIRE] = NULL,
	[EF_S_TOUCH] = NULL,
	[EF_S_BUMP] = effect_dump_s_bump,
	[EF_S_DMG] = effect_dump_s_dmg,
	[EF_ROTATION] = effect_dump_rotation,
	[EF_A_PRESSURE_PLATE] = effect_dump_a_pressure_plate,
	[EF_A_CIRCLE_MOVE] = NULL,
	[EF_M_GRAB] = effect_dump_m_grab,
	[EF_M_DROP] = effect_dump_m_drop,
	[EF_M_PUT] = effect_dump_m_put,
	[EF_M_THROW] = effect_dump_m_throw,
	[EF_M_AIM_FOR] = effect_dump_m_aim_for,
	[EF_M_TOUCH] = effect_dump_m_touch,
	[EF_R_TOUCH_RNG_TP] = NULL,
	[EF_R_TOUCH_TOGGLE_BLOCK] = NULL,
	[EF_R_TOUCH_SHOOT_PROJECTILE] = NULL,
	[EF_STATS] = effect_dump_stats,
	[EF_PH_LIQUID] = effect_dump_ph_liquid,
	[EF_CONTAINER] = effect_dump_container,
	[EF_CONTAINER_ITEM] = effect_dump_container_item,
	[EF_WET] = effect_dump_wet,
};

effect_scan_t effect_scan_functions[] = {
	[EF_B_NONEXISTENT] = NULL,
	[EF_B_INDEX] = effect_scan_b_index,
	[EF_PH_BLOCK] = effect_scan_ph_block,
	[EF_PH_ITEM] = effect_scan_ph_item,
	[EF_FALLING] = NULL,
	[EF_TRACER] = effect_scan_tracer,
	[EF_BLOCK_MOVE] = effect_scan_block_move,
	[EF_STAIR_MOVE] = effect_scan_stair_move,
	[EF_RENDER] = effect_scan_render,
	[EF_NOPHYSICS] = NULL,
	[EF_LIMB_SLOT] = effect_scan_limb_slot,
	[EF_LIMB_HAND] = effect_scan_limb_hand,
	[EF_LIMB_LEG] = NULL,
	[EF_MATERIAL] = effect_scan_material,
	[EF_AIM] = effect_scan_aim,
	[EF_ATTACK] = effect_scan_attack,
	[EF_TABLE] = NULL,
	[EF_TABLE_ITEM] = effect_scan_table_item,
	[EF_FIRE] = NULL,
	[EF_S_TOUCH] = NULL,
	[EF_S_BUMP] = effect_scan_s_bump,
	[EF_S_DMG] = effect_scan_s_dmg,
	[EF_ROTATION] = effect_scan_rotation,
	[EF_A_PRESSURE_PLATE] = effect_scan_a_pressure_plate,
	[EF_A_CIRCLE_MOVE] = NULL,
	[EF_M_GRAB] = effect_scan_m_grab,
	[EF_M_DROP] = effect_scan_m_drop,
	[EF_M_PUT] = effect_scan_m_put,
	[EF_M_THROW] = effect_scan_m_throw,
	[EF_M_AIM_FOR] = effect_scan_m_aim_for,
	[EF_M_TOUCH] = effect_scan_m_touch,
	[EF_R_TOUCH_RNG_TP] = NULL,
	[EF_R_TOUCH_TOGGLE_BLOCK] = NULL,
	[EF_R_TOUCH_SHOOT_PROJECTILE] = NULL,
	[EF_STATS] = effect_scan_stats,
	[EF_PH_LIQUID] = effect_scan_ph_liquid,
	[EF_CONTAINER] = effect_scan_container,
	[EF_CONTAINER_ITEM] = effect_scan_container_item,
	[EF_WET] = effect_scan_wet,
};

effect_rem_t effect_rem_functions[] = {
	[EF_B_NONEXISTENT] = NULL,
	[EF_B_INDEX] = NULL,
	[EF_PH_BLOCK] = NULL,
	[EF_PH_ITEM] = effect_rem_ph_item,
	[EF_FALLING] = NULL,
	[EF_TRACER] = NULL,
	[EF_BLOCK_MOVE] = NULL,
	[EF_STAIR_MOVE] = NULL,
	[EF_RENDER] = NULL,
	[EF_NOPHYSICS] = NULL,
	[EF_LIMB_SLOT] = effect_rem_limb_slot,
	[EF_LIMB_HAND] = effect_rem_limb_hand,
	[EF_LIMB_LEG] = NULL,
	[EF_MATERIAL] = NULL,
	[EF_AIM] = effect_rem_aim,
	[EF_ATTACK] = effect_rem_attack,
	[EF_TABLE] = NULL,
	[EF_TABLE_ITEM] = effect_rem_table_item,
	[EF_FIRE] = NULL,
	[EF_S_TOUCH] = NULL,
	[EF_S_BUMP] = effect_rem_s_bump,
	[EF_S_DMG] = NULL,
	[EF_ROTATION] = NULL,
	[EF_A_PRESSURE_PLATE] = NULL,
	[EF_A_CIRCLE_MOVE] = NULL,
	[EF_M_GRAB] = effect_rem_m_grab,
	[EF_M_DROP] = NULL,
	[EF_M_PUT] = effect_rem_m_put,
	[EF_M_THROW] = NULL,
	[EF_M_AIM_FOR] = effect_rem_m_aim_for,
	[EF_M_TOUCH] = effect_rem_m_touch,
	[EF_R_TOUCH_RNG_TP] = NULL,
	[EF_R_TOUCH_TOGGLE_BLOCK] = NULL,
	[EF_R_TOUCH_SHOOT_PROJECTILE] = NULL,
	[EF_STATS] = NULL,
	[EF_PH_LIQUID] = NULL,
	[EF_CONTAINER] = NULL,
	[EF_CONTAINER_ITEM] = effect_rem_container_item,
	[EF_WET] = NULL,
};
